-- Generated by Oracle SQL Developer Data Modeler 21.4.2.059.0838
--   at:        2022-05-17 17:26:11 CEST
--   site:      Oracle Database 21c
--   type:      Oracle Database 21c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE OR REPLACE TRIGGER PREF_OFR_SLOTS_INS_TRG 
    BEFORE INSERT ON PREFERENCES 
    FOR EACH ROW 
    WHEN ( new.result = 'Y' ) 
DECLARE
    v_preferences   NUMBER;
    v_slots         NUMBER;
BEGIN
    -- Count all preferences enrolled
    SELECT 	COUNT(*)
    INTO    v_preferences
    FROM 	preferences p 
    WHERE 	p.course_code = :new.course_code 
        AND p.registration_code = :new.registration_code 
        AND p.result = 'Y';
    
    -- Get the available slots for course in that registration
    SELECT 	available_slots 
    INTO    v_slots
    FROM 	offers o 
    WHERE 	o.course_code = :new.course_code 
        AND o.registration_code = :new.registration_code;
    
    -- Make sure the list of enrolled students is smaller/(equal) than
    -- the number of available slots
	IF v_preferences > v_slots THEN
		raise_application_error(-20001, 'Not enough slots for the offer!');
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER PREF_OFR_SLOTS_UP_TRG 
    BEFORE UPDATE ON PREFERENCES 
    FOR EACH ROW 
    WHEN ( new.result = 'Y' AND old.result != new.result ) 
DECLARE
    v_preferences   NUMBER;
    v_slots         NUMBER;
BEGIN
    -- Count all preferences chosen
    SELECT 	COUNT(*)
    INTO    v_preferences
    FROM 	preferences p 
    WHERE 	p.course_code = :new.course_code 
        AND p.registration_code = :new.registration_code 
        AND p.result = 'Y';
    
    -- Get the available slots for course in that registration
    SELECT 	available_slots 
    INTO    v_slots
    FROM 	offers o 
    WHERE 	o.course_code = :new.course_code 
        AND o.registration_code = :new.registration_code;
    
    -- Make sure the list of enrolled students is smaller/(equal) than the number
    -- of available slots
	IF v_preferences > v_slots THEN
		raise_application_error(-20001, 'Not enough slots for the offer!');
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER PREF_REG_INS_TRG 
    BEFORE INSERT ON PREFERENCES 
    FOR EACH ROW 
DECLARE
    v_registrations NUMBER;
BEGIN
    
    -- To check if registration is now open, 
    -- Count registrations open now with given registration_code
    SELECT  COUNT(*) 
    INTO    v_registrations
    FROM    registrations r 
    WHERE   r.registration_code = :new.registration_code 
        AND (SYSDATE BETWEEN r.start_date AND r.end_date);
    
    -- If registrations count is equal to 0 this means that the choosen 
    -- registration is closed (or not open yet)
	IF v_registrations = 0 THEN
		raise_application_error(-20002, 'Cannot insert preference for closed (or not open yet) registration');
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER PREF_REG_UP_TRG 
    BEFORE UPDATE ON PREFERENCES 
    FOR EACH ROW 
    WHEN ( old.sequential_number != new.sequential_number ) 
DECLARE
    v_registrations NUMBER;
BEGIN
    
    -- To check if registration is now open, 
    -- Count registrations open now with given registration_code
    SELECT  COUNT(*) 
    INTO    v_registrations
    FROM    registrations r 
    WHERE   r.registration_code = :new.registration_code 
        AND (SYSDATE BETWEEN r.start_date AND r.end_date);
    
    -- If registrations count is equal to 0 this means that the choosen 
    -- registration is closed (or not open yet)
	IF v_registrations = 0 THEN
		raise_application_error(-20002, 'Cannot modify preference for closed (or not open yet) registration');
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER REG_INTERVAL_INS_TRG 
    BEFORE INSERT ON REGISTRATIONS 
    FOR EACH ROW 
    ENABLE 
DECLARE
    v_registrations NUMBER;
BEGIN
    -- Count registrations overlaping with new registration
    SELECT 	COUNT(*)
    INTO    v_registrations
    FROM 	registrations reg 
    WHERE 	(:new.start_date BETWEEN reg.start_date AND reg.end_date) 
        OR 	(:new.end_date BETWEEN reg.start_date AND reg.end_date) 
        OR  (reg.start_date BETWEEN :new.start_date AND :new.end_date);
    
    -- If there are registrations overlaping an signal error
	IF v_registrations > 0  THEN
		raise_application_error(-20000, 'Two Registrations Overlap!');
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER REG_INTERVAL_UP_TRG 
    BEFORE UPDATE ON REGISTRATIONS 
    FOR EACH ROW 
    WHEN ( old.start_date != new.start_date OR old.end_date != new.end_date ) 
DECLARE
    v_registrations NUMBER;
BEGIN
    -- Count registrations overlaping with new registration
    SELECT 	COUNT(*)
    INTO	v_registrations
    FROM	registrations reg 
    WHERE 	(:new.start_date BETWEEN reg.start_date AND reg.end_date) 
        OR	(:new.end_date BETWEEN reg.start_date AND reg.end_date) 
        OR	(reg.start_date BETWEEN :new.start_date AND :new.end_date);
    
    -- If there are registrations overlaping an signal error
	IF v_registrations > 0  THEN
		raise_application_error(-20000, 'Two Registrations Overlap!');
	END IF;
END; 
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             0
-- CREATE INDEX                             0
-- ALTER TABLE                              0
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           6
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
